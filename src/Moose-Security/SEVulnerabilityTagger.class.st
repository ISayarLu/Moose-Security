"
I am an abstract class to represent a tagger of vulnerability.

I should be configured with a block to find the entities to tag in a model and also configured with a tag name to tag those entities. I can then be applied on a model using `#applyOn:`.

It is possibile to tag all vulnerable entities of a model executing:

```st
SEVulnerabilityTagger tagAllVulnerabilitiesOf: aMooseModel
```

It is also possible to tag only one kind of vulnerable entites executing:

```st
SEVulnerabilityTagger transformerClassTagger applyOn: aMooseModel
```
"
Class {
	#name : #SEVulnerabilityTagger,
	#superclass : #Object,
	#instVars : [
		'tagName',
		'queryBlock'
	],
	#category : #'Moose-Security'
}

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> execTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #exec in: model ]
		  with: #execMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> getOutputPropertiesTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
			  tagger methodsNamed: #getOutputProperties in: model ]
		  with: #getOutputPropertiesMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> getTransletInstanceTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
			  tagger methodsNamed: #getTransletInstance in: model ]
		  with: #getTransletInstanceMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> mapClassTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger | tagger classesImplementing: #Map in: model ]
		  with: #MapClass
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> newBufferedReaderTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #newBufferedReader in: model ]
		  with: #newBufferedReaderMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> newBufferedWriterTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #newBufferedWriterTagger in: model ]
		  with: #newBufferedWriterMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> newTransformerTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #newTransformer in: model ]
		  with: #newTransformerMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> readAllBytesTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #readAllBytes in: model ]
		  with: #readAllBytesMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> readLineTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #readLine in: model ]
		  with: #readLineMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> readObjectTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #readObject in: model ]
		  with: #readObjectMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> serializableClassTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger | tagger classesImplementing: #Serializable in: model ]
		  with: #SerializableClass
]

{ #category : #tagging }
SEVulnerabilityTagger class >> tagAllVulnerabilitiesOf: aModel [

	self vulnerabilityTaggers do: [ :tagger | tagger applyOn: aModel ]
]

{ #category : #'instance creation' }
SEVulnerabilityTagger class >> tagResultOf: aBlock with: aTag [

	^ self new
		  queryBlock: aBlock;
		  tagName: aTag;
		  yourself
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> transformTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #transform in: model ]
		  with: #transformMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> transformerClassTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger | tagger classesImplementing: #Transformer in: model ]
		  with: #TransformerClass
]

{ #category : #accessing }
SEVulnerabilityTagger class >> vulnerabilityTaggers [

	^ (Pragma allNamed: #cautionTagger in: self class) collect: [ :pragma |
		  self perform: pragma method selector ]
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> writeTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #write in: model ]
		  with: #writeMethod
]

{ #category : #'instance creation' }
SEVulnerabilityTagger >> applyOn: aModel [

	(self queryBlock cull: aModel cull: self) ifNotEmpty: [ :entities |
		| tag |
		tag := aModel allTags
			       detect: [ :t | t name = self tagName ]
			       ifNone: [ aModel createTagNamed: self tagName ].
		entities do: [ :e | e tagWith: tag ] ]
]

{ #category : #accessing }
SEVulnerabilityTagger >> classesImplementing: aString in: aModel [

	^ (self nonTestClassesOf: aModel) select: [ :class |
		  class directImplementedInterfaces anySatisfy: [ :interface |
			  interface ifNil: [ false ] ifNotNil: [ interface name = aString ] ] ]
]

{ #category : #accessing }
SEVulnerabilityTagger >> classesOf: aModel [ 
	^ aModel allModelClasses 
]

{ #category : #accessing }
SEVulnerabilityTagger >> methodsNamed: aString in: aModel [

	^ aModel allModelMethods select: [ :method |
		  method name = aString ]
]

{ #category : #accessing }
SEVulnerabilityTagger >> nonTestClassesOf: aModel [

	^ (self classesOf: aModel) reject: #isTestCase
]

{ #category : #accessing }
SEVulnerabilityTagger >> queryBlock [

	^ queryBlock
]

{ #category : #accessing }
SEVulnerabilityTagger >> queryBlock: anObject [

	queryBlock := anObject
]

{ #category : #accessing }
SEVulnerabilityTagger >> tagName [

	^ tagName
]

{ #category : #accessing }
SEVulnerabilityTagger >> tagName: anObject [

	tagName := anObject
]
