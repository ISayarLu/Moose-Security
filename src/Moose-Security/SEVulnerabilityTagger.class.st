"
I am an abstract class to represent a tagger of vulnerability.

I should be configured with a block to find the entities to tag in a model and also configured with a tag name to tag those entities. I can then be applied on a model using `#applyOn:`.

It is possibile to tag all vulnerable entities of a model executing:

```st
SEVulnerabilityTagger tagAllVulnerabilitiesOf: aMooseModel
```

It is also possible to tag only one kind of vulnerable entites executing:

```st
SEVulnerabilityTagger transformerClassTagger applyOn: aMooseModel
```
"
Class {
	#name : #SEVulnerabilityTagger,
	#superclass : #Object,
	#instVars : [
		'tagName',
		'queryBlock'
	],
	#category : #'Moose-Security'
}

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> connectTagger [
"This method is located in the SocketChannel class.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #connect in: model ]
		  with: #connectMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> createSourceFileTagger [
"This method is located in the Filer interface. This interface supports the creation of new files by an annotation processor. Files created in this way will be known to the annotation processing tool implementing this interface, better enabling the tool to manage them. Source and class files so created will be considered for processing by the tool in a subsequent round of processing after the close method has been called on the Writer or OutputStream used to write the contents of the file. Three kinds of files are distinguished: source files, class files, and auxiliary resource files.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #createSourceFile in: model ]
		  with: #createSourceFileMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> execTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #exec in: model ]
		  with: #execMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> newBufferedReaderTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #newBufferedReader in: model ]
		  with: #newBufferedReaderMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> newBufferedWriterTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #newBufferedWriter in: model ]
		  with: #newBufferedWriterMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> newOutputStreamTagger [
"This method is located in the Files class.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #newOutputStream in: model ]
		  with: #newOutputStreamMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> openTagger [
"This method is located in the SocketChannel class.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #open in: model ]
		  with: #openMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> readAllBytesTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #readAllBytes in: model ]
		  with: #readAllBytesMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> readLineTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #readLine in: model ]
		  with: #readLineMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> setOwnerTagger [
"This method is located in the Files class.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #setOwner in: model ]
		  with: #setOwnerMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> shutdownInputTagger [
"This method is located in the SocketChannel class.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #shutdownInput in: model ]
		  with: #shutdownInputMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> shutdownOutputTagger [
"This method is located in the SocketChannel class.
"
	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #shutdownOutput in: model ]
		  with: #shutdownOutputMethod
]

{ #category : #tagging }
SEVulnerabilityTagger class >> tagAllVulnerabilitiesOf: aModel [

	self vulnerabilityTaggers do: [ :tagger | tagger applyOn: aModel ]
]

{ #category : #accessing }
SEVulnerabilityTagger class >> tagAndVisualize: aMooseModel [

	self tagAllVulnerabilitiesOf: aMooseModel.

	((aMooseModel allUsing: FamixTNamedEntity) reject: #isStub) miPropagate.

	MiArchitecturalMapBrowser open
]

{ #category : #'instance creation' }
SEVulnerabilityTagger class >> tagResultOf: aBlock with: aTag [

	^ self new
		  queryBlock: aBlock;
		  tagName: aTag;
		  yourself
]

{ #category : #accessing }
SEVulnerabilityTagger class >> vulnerabilityTaggers [

	^ ((self class withAllSubclasses flatCollect: #methods) select: [ :method | method pragmas anySatisfy: [ :pragma | pragma selector = #cautionTagger ] ])
		  collect: [ :method | method methodClass soleInstance perform: method selector ]
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> writeStringTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #writeString in: model ]
		  with: #writeStringMethod
]

{ #category : #'default taggers' }
SEVulnerabilityTagger class >> writeTagger [

	<cautionTagger>
	^ self
		  tagResultOf: [ :model :tagger |
		  tagger methodsNamed: #write in: model ]
		  with: #writeMethod
]

{ #category : #'instance creation' }
SEVulnerabilityTagger >> applyOn: aModel [

	(self queryBlock cull: aModel cull: self) ifNotEmpty: [ :entities |
		| tag |
		tag := aModel allTags
			       detect: [ :t | t name = self tagName ]
			       ifNone: [ aModel createTagNamed: self tagName ].
		entities do: [ :e | e tagWith: tag ] ]
]

{ #category : #accessing }
SEVulnerabilityTagger >> classesImplementing: aString in: aModel [

	^ (self nonTestClassesOf: aModel) select: [ :class |
		  class directImplementedInterfaces anySatisfy: [ :interface |
			  interface ifNil: [ false ] ifNotNil: [ interface name = aString ] ] ]
]

{ #category : #accessing }
SEVulnerabilityTagger >> classesOf: aModel [ 
	^ aModel allModelClasses 
]

{ #category : #accessing }
SEVulnerabilityTagger >> methodsNamed: aString in: aModel [

	^ aModel allModelMethods select: [ :method |
		  method name = aString ]
]

{ #category : #accessing }
SEVulnerabilityTagger >> nonTestClassesOf: aModel [

	^ (self classesOf: aModel) reject: #isTestCase
]

{ #category : #accessing }
SEVulnerabilityTagger >> queryBlock [

	^ queryBlock
]

{ #category : #accessing }
SEVulnerabilityTagger >> queryBlock: anObject [

	queryBlock := anObject
]

{ #category : #accessing }
SEVulnerabilityTagger >> tagName [

	^ tagName
]

{ #category : #accessing }
SEVulnerabilityTagger >> tagName: anObject [

	tagName := anObject
]
