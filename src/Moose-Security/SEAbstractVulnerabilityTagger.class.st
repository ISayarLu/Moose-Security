"
I am an abstract class to represent a tagger of vulnerability.

Each of my subclasses will be able to find one kind of vulnerable entities in a model and tag them with a specific tag.

It is possibile to tag all vulnerable entities of a model executing:

```st
SEAbstractVulnerabilityTagger tagAllVulnerabilitiesOf: aMooseModel
```

It is also possible to tag only one kind of vulnerable entites executing:

```st
SETransformerVulnerabilityTagger tagVulnerabilitiesOf: aMooseModel
```
"
Class {
	#name : #SEAbstractVulnerabilityTagger,
	#superclass : #Object,
	#instVars : [
		'model'
	],
	#category : #'Moose-Security'
}

{ #category : #tagging }
SEAbstractVulnerabilityTagger class >> tagAllVulnerabilitiesOf: aModel [

	(self allSubclasses reject: [ :class | class isAbstract ]) do: [
		:class | class tagVulnerabilitiesOf: aModel ]
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger class >> tagName [

	^ self subclassResponsibility
]

{ #category : #tagging }
SEAbstractVulnerabilityTagger class >> tagVulnerabilitiesOf: aModel [

	^ self new
		  model: aModel;
		  tagVulnerabilities
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger >> classes [ 
	^ self model allModelClasses 
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger >> model [

	^ model
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger >> model: anObject [

	model := anObject
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger >> nonTestClasses [

	^ self classes reject: #isTestCase
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger >> queryEntitiesToTag [

	^ self subclassResponsibility
]

{ #category : #accessing }
SEAbstractVulnerabilityTagger >> tagName [

	^ self class tagName
]

{ #category : #tagging }
SEAbstractVulnerabilityTagger >> tagVulnerabilities [

	| tag |
	tag := self model allTags
		       detect: [ :t | t name = self tagName ]
		       ifNone: [ self model createTagNamed: self tagName ].
	self queryEntitiesToTag do: [ :e | e tagWith: tag ]
]
